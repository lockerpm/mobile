// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VinCSSFido2ClientSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CFNetwork
import CoreBluetooth
import CryptoSwift
import CryptorECC
import Foundation
import LocalAuthentication
import Network
import PromiseKit
import Swift
import SwiftCBOR
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public enum AttestationConveyancePreference : Swift.String, Swift.Codable {
  case none
  case direct
  case indirect
  case enterprise
  case unknown
  public static func == (lhs: VinCSSFido2ClientSDK.AttestationConveyancePreference, rhs: VinCSSFido2ClientSDK.AttestationConveyancePreference) -> Swift.Bool
  public static func fromString(value: Swift.String) -> VinCSSFido2ClientSDK.AttestationConveyancePreference
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class Fido2ClientSDK {
  public init()
  public func openUrl(viewController: UIKit.UIViewController, url: Swift.String, popPreviousNavigationItem: Swift.Bool = false, fido2ClientDelegate: VinCSSFido2ClientSDK.Fido2ClientViewControllerDelegate?, navigateWhenFinished: Swift.Bool, shouldValidatingURL: Swift.Bool, callbackURIDomain: Swift.String?)
  public func openUrl(viewController: UIKit.UIViewController, url: Swift.String, popPreviousNavigationItem: Swift.Bool = false, fido2ClientDelegate: VinCSSFido2ClientSDK.Fido2ClientViewControllerDelegate?)
  public func openUrl(viewController: UIKit.UIViewController, url: Swift.String, popPreviousNavigationItem: Swift.Bool = false)
  @objc deinit
}
public struct PublicKeyCredentialParameters : Swift.Codable, SwiftCBOR.CBOREncodable {
  public func encode(options: SwiftCBOR.CBOROptions) -> [Swift.UInt8]
  public var type: VinCSSFido2ClientSDK.PublicKeyCredentialType
  public var alg: VinCSSFido2ClientSDK.COSEAlgorithmIdentifier
  public init(type: VinCSSFido2ClientSDK.PublicKeyCredentialType = .publicKey, alg: VinCSSFido2ClientSDK.COSEAlgorithmIdentifier)
  public func encode() -> [Swift.UInt8]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AuthenticationExtensionsClientInputs : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol UserConsentViewControllerDelegate : AnyObject {
  func consentViewControllerWillDismiss(viewController: UIKit.UIViewController)
}
public class UserConsentUI : VinCSSFido2ClientSDK.UserConsentViewControllerDelegate {
  public typealias MessageBuilder = ((VinCSSFido2ClientSDK.PublicKeyCredentialRpEntity, VinCSSFido2ClientSDK.PublicKeyCredentialUserEntity) -> Swift.String)
  public var opened: Swift.Bool {
    get
  }
  public init(viewController: UIKit.UIViewController)
  public func cancel()
  public func consentViewControllerWillDismiss(viewController: UIKit.UIViewController)
  @objc deinit
}
public protocol Fido2ClientViewControllerDelegate : ObjectiveC.NSObject {
  func onClientClose(_ mFido2ClientViewController: VinCSSFido2ClientSDK.Fido2ClientViewController)
  func onClientProcessLocalHost(withCode: Swift.String)
  func onClientLoadPageFinished(status: Swift.Int, type: Swift.Int?, errorCode: Swift.Int?, errorMessage: Swift.String?, callbackUrl: Swift.String?, fromVC: UIKit.UIViewController)
}
public enum FormError : Swift.Error {
  case missing(Swift.String)
  case empty(Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class Fido2ClientViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: VinCSSFido2ClientSDK.Fido2ClientViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var popPreviousNavigationItem: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var navigateWhenFinished: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var enableValidatingURL: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func initBaseURL(url: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setCallbackURIDomain(domain: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setDelegate(delegate: VinCSSFido2ClientSDK.Fido2ClientViewControllerDelegate)
  @_Concurrency.MainActor(unsafe) public func enableNavigateWhenFinished(enable: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func enableHandleLocal(isEnable: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CollectedClientData : Swift.Codable {
  public var challenge: Swift.String
  public var origin: Swift.String
  public var type: VinCSSFido2ClientSDK.CollectedClientDataType
  public var crossOrigin: Swift.Bool?
  public var tokenBinding: VinCSSFido2ClientSDK.TokenBinding?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TokenBinding : Swift.Codable {
  public var status: VinCSSFido2ClientSDK.TokenBindingStatus
  public var id: Swift.String
  public init(id: Swift.String, status: VinCSSFido2ClientSDK.TokenBindingStatus)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum CollectedClientDataType : Swift.String, Swift.Codable {
  case webAuthnCreate
  case webAuthnGet
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TokenBindingStatus : Swift.String, Swift.Codable {
  case present
  case supported
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PublicKeyCredentialType : Swift.String, Swift.Codable, SwiftCBOR.CBOREncodable {
  public func encode(options: SwiftCBOR.CBOROptions) -> [Swift.UInt8]
  case publicKey
  case other
  public func encode() -> [Swift.UInt8]
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AuthenticatorTransport : Swift.String, Swift.Codable, Swift.Equatable {
  case usb
  case nfc
  case ble
  case internal_
  public static func == (lhs: VinCSSFido2ClientSDK.AuthenticatorTransport, rhs: VinCSSFido2ClientSDK.AuthenticatorTransport) -> Swift.Bool
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PublicKeyCredentialDescriptor : Swift.Codable, SwiftCBOR.CBOREncodable {
  public func encode(options: SwiftCBOR.CBOROptions) -> [Swift.UInt8]
  public var type: VinCSSFido2ClientSDK.PublicKeyCredentialType
  public var id: [Swift.UInt8]
  public var transports: [VinCSSFido2ClientSDK.AuthenticatorTransport]
  public mutating func addTransport(transport: VinCSSFido2ClientSDK.AuthenticatorTransport)
  public func encode() -> [Swift.UInt8]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class WebAuthnClient {
  public var delegate: VinCSSFido2ClientSDK.WebAuthnClientDelegate?
  public init()
  public func setDelegate(delegate: VinCSSFido2ClientSDK.WebAuthnClientDelegate)
  public func setUserConsentUI(ui: VinCSSFido2ClientSDK.UserConsentUI)
  public func create(origin: Swift.String, request: Swift.String, sameOriginWithAncestors: Swift.Bool = true)
  public func create(origin: Swift.String, options: VinCSSFido2ClientSDK.PublicKeyCredentialCreationOptions)
  public func get(origin: Swift.String, request: Swift.String, sameOriginWithAncestors: Swift.Bool = true)
  public func get(origin: Swift.String, options: VinCSSFido2ClientSDK.PublicKeyCredentialRequestOptions)
  public func error(reason: Swift.String)
  public func cancel()
  public func close()
  @objc deinit
}
public protocol WebAuthnClientDelegate {
  func onCreateResult(response: Swift.String)
  func onGetResult(response: Swift.String)
  func onError(reason: Swift.String)
  func onDeviceDiscovered()
  func onUserActionRequired()
  func onUserActioned()
}
@_hasMissingDesignatedInitializers public class JSONHelper<T> where T : Swift.Decodable, T : Swift.Encodable {
  public static func decode(_ json: Swift.String) -> Swift.Optional<T>
  public static func encode(_ obj: T) -> Swift.Optional<Swift.String>
  @objc deinit
}
public struct PublicKeyCredentialCreationOptions : Swift.Codable {
  public var rp: VinCSSFido2ClientSDK.PublicKeyCredentialRpEntity
  public var user: VinCSSFido2ClientSDK.PublicKeyCredentialUserEntity
  public var challenge: Swift.String
  public var pubKeyCredParams: [VinCSSFido2ClientSDK.PublicKeyCredentialParameters]
  public var timeout: Swift.Int?
  public var excludeCredentials: [VinCSSFido2ClientSDK.PublicKeyCredentialDescriptor]
  public var authenticatorSelection: VinCSSFido2ClientSDK.AuthenticatorSelectionCriteria?
  public var attestation: VinCSSFido2ClientSDK.AttestationConveyancePreference
  public var extensions: VinCSSFido2ClientSDK.AuthenticationExtensionsClientInputs?
  public init(rp: VinCSSFido2ClientSDK.PublicKeyCredentialRpEntity, user: VinCSSFido2ClientSDK.PublicKeyCredentialUserEntity, challenge: Swift.String, pubKeyCredParams: [VinCSSFido2ClientSDK.PublicKeyCredentialParameters] = [PublicKeyCredentialParameters](), timeout: Swift.Int? = nil, excludeCredentials: [VinCSSFido2ClientSDK.PublicKeyCredentialDescriptor] = [PublicKeyCredentialDescriptor](), authenticatorSelection: VinCSSFido2ClientSDK.AuthenticatorSelectionCriteria? = nil, attestation: VinCSSFido2ClientSDK.AttestationConveyancePreference = .none)
  public mutating func addPubKeyCredParam(alg: VinCSSFido2ClientSDK.COSEAlgorithmIdentifier)
  public static func fromJSON(optionsString: Swift.String) -> Swift.Optional<VinCSSFido2ClientSDK.PublicKeyCredentialCreationOptions>
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PublicKeyCredentialCreationArgs : Swift.Codable {
  public let publicKey: VinCSSFido2ClientSDK.PublicKeyCredentialCreationOptions
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Bytes {
  public static func fromHex(_ value: Swift.String) -> [Swift.UInt8]
  public static func fromString(_ value: Swift.String) -> [Swift.UInt8]
  public static func fromUInt64(_ value: Swift.UInt64) -> [Swift.UInt8]
  public static func toUInt64(_ bytes: [Swift.UInt8]) -> Swift.UInt64
  public static func fromUInt32(_ value: Swift.UInt32) -> [Swift.UInt8]
  public static func toUInt32(_ bytes: [Swift.UInt8]) -> Swift.UInt32
  public static func fromUInt16(_ value: Swift.UInt16) -> [Swift.UInt8]
  public static func toUInt16(_ bytes: [Swift.UInt8]) -> Swift.UInt16
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Authenticator {
  open func makeCredential(cbor: [Swift.UInt8])
  open func getAssertion(cbor: [Swift.UInt8])
  open func getPinToken(pin: Swift.String)
  open func cancel()
  @objc deinit
}
public protocol KeySelectionViewDelegate : AnyObject {
  func userDidSelectCredential(source: VinCSSFido2ClientSDK.GetAssertionResponse)
  func userDidCancel()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KeySelectionView : UIKit.UIView, UIKit.UIPickerViewDataSource, UIKit.UIPickerViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, viewForRow row: Swift.Int, forComponent component: Swift.Int, reusing view: UIKit.UIView?) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class KeySelectionViewController : UIKit.UIViewController, VinCSSFido2ClientSDK.KeySelectionViewDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: VinCSSFido2ClientSDK.UserConsentViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func userDidCancel()
  @_Concurrency.MainActor(unsafe) public func userDidSelectCredential(source: VinCSSFido2ClientSDK.GetAssertionResponse)
  @objc deinit
}
public protocol AuthenticatorResponse : Swift.Decodable, Swift.Encodable {
  var clientDataJSON: Swift.String { get set }
}
public struct AttestationResponse : VinCSSFido2ClientSDK.AuthenticatorResponse, Swift.Codable {
  public var clientDataJSON: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AssertionResponse : VinCSSFido2ClientSDK.AuthenticatorResponse, Swift.Codable {
  public var clientDataJSON: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PublicKeyCredential<T> : Swift.Codable where T : VinCSSFido2ClientSDK.AuthenticatorResponse {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PublicKeyCredentialRpEntity : Swift.Codable, SwiftCBOR.CBOREncodable {
  public func encode(options: SwiftCBOR.CBOROptions) -> [Swift.UInt8]
  public var id: Swift.String?
  public var name: Swift.String
  public var icon: Swift.String?
  public init(id: Swift.String? = nil, name: Swift.String, icon: Swift.String? = nil)
  public func encode() -> [Swift.UInt8]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AuthenticatorStatus {
  case handling
  case idle
  public static func == (a: VinCSSFido2ClientSDK.AuthenticatorStatus, b: VinCSSFido2ClientSDK.AuthenticatorStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PublicKeyCredentialRequestOptions {
  public static func fromJSON(jsonString: Swift.String) -> VinCSSFido2ClientSDK.PublicKeyCredentialRequestOptions?
  public func allowList2CBOR() -> [Swift.UInt8]
  public func userVerification2OptionCBOR() -> [Swift.UInt8]
}
public struct PublicKeyCredentialUserEntity : Swift.Codable, SwiftCBOR.CBOREncodable {
  public func encode(options: SwiftCBOR.CBOROptions) -> [Swift.UInt8]
  public var id: [Swift.UInt8]
  public var displayName: Swift.String?
  public var name: Swift.String?
  public var icon: Swift.String?
  public init(id: [Swift.UInt8] = [UInt8](), displayName: Swift.String? = nil, name: Swift.String? = nil, icon: Swift.String? = nil)
  public func encode() -> [Swift.UInt8]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class WebKitViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var baseUrl: Swift.String?
  @_Concurrency.MainActor(unsafe) public var webViewController: VinCSSFido2ClientSDK.WebViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WebViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler, WebKit.WKUIDelegate {
  @_Concurrency.MainActor(unsafe) public var baseURL: Swift.String?
  @_Concurrency.MainActor(unsafe) public var delegate: VinCSSFido2ClientSDK.Fido2ClientViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var navigateWhenFinished: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var enableValidatingURL: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var callbackURIDomain: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc deinit
}
extension VinCSSFido2ClientSDK.WebViewController : VinCSSFido2ClientSDK.WebAuthnClientDelegate {
  @_Concurrency.MainActor(unsafe) public func onUserActionRequired()
  @_Concurrency.MainActor(unsafe) public func onCreateResult(response: Swift.String)
  @_Concurrency.MainActor(unsafe) public func onGetResult(response: Swift.String)
  @_Concurrency.MainActor(unsafe) public func onError(reason: Swift.String)
  @_Concurrency.MainActor(unsafe) public func onDeviceDiscovered()
  @_Concurrency.MainActor(unsafe) public func onUserActioned()
}
public enum CTAPStatus : Swift.UInt8, Swift.Error, Swift.CaseIterable {
  case SUCCESS
  case INVALID_COMMAND
  case INVALID_PARAMETER
  case INVALID_LENGTH
  case INVALID_SEQ
  case TIMEOUT
  case CHANNEL_BUSY
  case LOCK_REQUIRED
  case INVALID_CHANNEL
  case CBOR_PARSING
  case CBOR_UNEXPECTED_TYPE
  case INVALID_CBOR
  case INVALID_CBOR_TYPE
  case MISSING_PARAMETER
  case LIMIT_EXCEEDED
  case UNSUPPORTED_EXTENSION
  case TOO_MANY_ELEMENTS
  case EXTENSION_NOT_SUPPORTED
  case CREDENTIAL_EXCLUDED
  case CREDENTIAL_NOT_VALID
  case PROCESSING
  case INVALID_CREDENTIAL
  case USER_ACTION_PENDING
  case OPERATION_PENDING
  case NO_OPERATIONS
  case UNSUPPORTED_ALGORITHM
  case OPERATION_DENIED
  case KEY_STORE_FULL
  case NOT_BUSY
  case NO_OPERATION_PENDING
  case UNSUPPORTED_OPTION
  case INVALID_OPTION
  case KEEP_ALIVE_CANCEL
  case NO_CREDENTIALS
  case USER_ACTION_TIMEOUT
  case NOT_ALLOWED
  case PIN_INVALID
  case PIN_BLOCKED
  case PIN_AUTH_INVALID
  case PIN_AUTH_BLOCKED
  case PIN_NOT_SET
  case PIN_REQUIRED
  case PIN_POLICY_VIOLATION
  case PIN_TOKEN_EXPIRED
  case REQUEST_TOO_LARGE
  case ACTION_TIMEOUT
  case OTHER
  case SPEC_LAST
  case EXTENSION_FIRST
  case EXTENSION_LAST
  case VENDOR_FIRST
  case VENDOR_KEYCHAIN_STORAGE_ERROR
  case VENDOR_KEYCHAIN_CREATE_KEY_ERROR
  case VENDOR_KEYCHAIN_SIGN_ERROR
  case VENDOR_CREATE_RESPONSE_ERROR
  case VENDOR_LAST
  public func toString() -> Swift.String
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [VinCSSFido2ClientSDK.CTAPStatus]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [VinCSSFido2ClientSDK.CTAPStatus] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_hasMissingDesignatedInitializers public class Fido2ClientSDKConfig {
  public static let shared: VinCSSFido2ClientSDK.Fido2ClientSDKConfig
  public func setUserSelectionMessage(msgBegin: Swift.String?, msgEnd: Swift.String?, showDomain: Swift.Bool)
  public func enableValidatingURL(enable: Swift.Bool)
  public func setValidateURLPublicKey(publicKey: Swift.String)
  @objc deinit
}
public struct AuthenticatorSelectionCriteria : Swift.Codable {
  public var authenticatorAttachment: VinCSSFido2ClientSDK.AuthenticatorAttachment?
  public var residentKey: VinCSSFido2ClientSDK.ResidentKeyRequirement?
  public var requireResidentKey: Swift.Bool
  public var userVerification: VinCSSFido2ClientSDK.UserVerificationRequirement
  public init(authenticatorAttachment: VinCSSFido2ClientSDK.AuthenticatorAttachment? = nil, residentKey: VinCSSFido2ClientSDK.ResidentKeyRequirement? = nil, requireResidentKey: Swift.Bool = false, userVerification: VinCSSFido2ClientSDK.UserVerificationRequirement = .preferred)
  public func getMakeCredentialOptionsCBOR() -> [Swift.UInt8]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AuthenticatorAttachment : Swift.String, Swift.Codable {
  case platform
  case crossPlatform
  public static func == (lhs: VinCSSFido2ClientSDK.AuthenticatorAttachment, rhs: VinCSSFido2ClientSDK.AuthenticatorAttachment) -> Swift.Bool
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UserVerificationRequirement : Swift.String, Swift.Codable {
  case required
  case preferred
  case discouraged
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ResidentKeyRequirement : Swift.String, Swift.Codable {
  case discouraged
  case preferred
  case required
  public static func fromString(value: Swift.String) -> VinCSSFido2ClientSDK.ResidentKeyRequirement
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum COSEAlgorithmIdentifier : Swift.Int, Swift.Codable, SwiftCBOR.CBOREncodable {
  public func encode(options: SwiftCBOR.CBOROptions) -> [Swift.UInt8]
  case rs256
  case rs384
  case rs512
  case es256
  case es384
  case es512
  case ed256
  case ed512
  case ps256
  public static func fromInt(_ num: Swift.Int) -> Swift.Optional<VinCSSFido2ClientSDK.COSEAlgorithmIdentifier>
  public static func == (lhs: VinCSSFido2ClientSDK.COSEAlgorithmIdentifier, rhs: VinCSSFido2ClientSDK.COSEAlgorithmIdentifier) -> Swift.Bool
  public func encode() -> [Swift.UInt8]
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol COSEKey {
  func toBytes() -> [Swift.UInt8]
}
public enum Errors : Swift.Int, Swift.Error, Swift.CaseIterable {
  case SUCCESS
  case INVALID_COMMAND
  case INVALID_PARAMETER
  case INVALID_LENGTH
  case INVALID_SEQ
  case TIMEOUT
  case CHANNEL_BUSY
  case LOCK_REQUIRED
  case INVALID_CHANNEL
  case CBOR_PARSING
  case CBOR_UNEXPECTED_TYPE
  case INVALID_CBOR
  case INVALID_CBOR_TYPE
  case MISSING_PARAMETER
  case LIMIT_EXCEEDED
  case UNSUPPORTED_EXTENSION
  case TOO_MANY_ELEMENTS
  case EXTENSION_NOT_SUPPORTED
  case CREDENTIAL_EXCLUDED
  case CREDENTIAL_NOT_VALID
  case PROCESSING
  case INVALID_CREDENTIAL
  case USER_ACTION_PENDING
  case OPERATION_PENDING
  case NO_OPERATIONS
  case UNSUPPORTED_ALGORITHM
  case OPERATION_DENIED
  case KEY_STORE_FULL
  case NOT_BUSY
  case NO_OPERATION_PENDING
  case UNSUPPORTED_OPTION
  case INVALID_OPTION
  case KEEP_ALIVE_CANCEL
  case NO_CREDENTIALS
  case USER_ACTION_TIMEOUT
  case NOT_ALLOWED
  case PIN_INVALID
  case PIN_BLOCKED
  case PIN_AUTH_INVALID
  case PIN_AUTH_BLOCKED
  case PIN_NOT_SET
  case PIN_REQUIRED
  case PIN_POLICY_VIOLATION
  case PIN_TOKEN_EXPIRED
  case REQUEST_TOO_LARGE
  case ACTION_TIMEOUT
  case OTHER
  case SPEC_LAST
  case EXTENSION_FIRST
  case EXTENSION_LAST
  case VENDOR_FIRST
  case UNSUPPORTED_URL
  case MISSING_CONFIG
  case AUTH_FAILED
  case WEBVIEW_CONNECTION_ERROR
  case WEBVIEW_SSL_ERROR
  case VENDOR_LAST
  case REACHING_MAXIMUM_REGISTERED_KEYS
  case INVALID_ATTESTATION
  case USERNAME_MISMATCH
  case USER_NOT_FOUND
  case INVALID_ASSERTION
  case REQUEST_EXPIRED
  case CREDENTIAL_NOT_FOUND
  case REQUEST_CLOSED
  case SERVER_CONNECTION_TIMEOUT
  case SERVER_RESPONSE_TIMEOUT
  public static func stringOfError(code: Swift.Int) -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [VinCSSFido2ClientSDK.Errors]
  public typealias RawValue = Swift.Int
  public static var allCases: [VinCSSFido2ClientSDK.Errors] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum CBORError : Swift.Error {
  case readError
  public static func == (a: VinCSSFido2ClientSDK.CBORError, b: VinCSSFido2ClientSDK.CBORError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GetAssertionResponse : SwiftCBOR.CBOREncodable {
  public func encode(options: SwiftCBOR.CBOROptions) -> [Swift.UInt8]
}
@_hasMissingDesignatedInitializers public class Base64 {
  public static func encodeBase64(_ bytes: [Swift.UInt8]) -> Swift.String
  public static func encodeBase64(_ data: Foundation.Data) -> Swift.String
  public static func encodeBase64URL(_ bytes: [Swift.UInt8]) -> Swift.String
  public static func encodeBase64URL(_ data: Foundation.Data) -> Swift.String
  @objc deinit
}
extension Swift.String {
  public func base64ToByteArray() -> [Swift.UInt8]
}
extension VinCSSFido2ClientSDK.AttestationConveyancePreference : Swift.Equatable {}
extension VinCSSFido2ClientSDK.AttestationConveyancePreference : Swift.Hashable {}
extension VinCSSFido2ClientSDK.AttestationConveyancePreference : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.CollectedClientDataType : Swift.Equatable {}
extension VinCSSFido2ClientSDK.CollectedClientDataType : Swift.Hashable {}
extension VinCSSFido2ClientSDK.CollectedClientDataType : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.TokenBindingStatus : Swift.Equatable {}
extension VinCSSFido2ClientSDK.TokenBindingStatus : Swift.Hashable {}
extension VinCSSFido2ClientSDK.TokenBindingStatus : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.PublicKeyCredentialType : Swift.Equatable {}
extension VinCSSFido2ClientSDK.PublicKeyCredentialType : Swift.Hashable {}
extension VinCSSFido2ClientSDK.PublicKeyCredentialType : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.AuthenticatorTransport : Swift.Hashable {}
extension VinCSSFido2ClientSDK.AuthenticatorTransport : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.AuthenticatorStatus : Swift.Equatable {}
extension VinCSSFido2ClientSDK.AuthenticatorStatus : Swift.Hashable {}
extension VinCSSFido2ClientSDK.CTAPStatus : Swift.Equatable {}
extension VinCSSFido2ClientSDK.CTAPStatus : Swift.Hashable {}
extension VinCSSFido2ClientSDK.CTAPStatus : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.AuthenticatorAttachment : Swift.Equatable {}
extension VinCSSFido2ClientSDK.AuthenticatorAttachment : Swift.Hashable {}
extension VinCSSFido2ClientSDK.AuthenticatorAttachment : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.UserVerificationRequirement : Swift.Equatable {}
extension VinCSSFido2ClientSDK.UserVerificationRequirement : Swift.Hashable {}
extension VinCSSFido2ClientSDK.UserVerificationRequirement : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.ResidentKeyRequirement : Swift.Equatable {}
extension VinCSSFido2ClientSDK.ResidentKeyRequirement : Swift.Hashable {}
extension VinCSSFido2ClientSDK.ResidentKeyRequirement : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.COSEAlgorithmIdentifier : Swift.Equatable {}
extension VinCSSFido2ClientSDK.COSEAlgorithmIdentifier : Swift.Hashable {}
extension VinCSSFido2ClientSDK.COSEAlgorithmIdentifier : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.Errors : Swift.Equatable {}
extension VinCSSFido2ClientSDK.Errors : Swift.Hashable {}
extension VinCSSFido2ClientSDK.Errors : Swift.RawRepresentable {}
extension VinCSSFido2ClientSDK.CBORError : Swift.Equatable {}
extension VinCSSFido2ClientSDK.CBORError : Swift.Hashable {}
